from flask import request, jsonify
from flask_restx import Namespace, Resource
from Crawling.parsing import NVD_CVE_Parser

db_api = Namespace("api/db", description="Database 관련 API")
protected_dbs = ["admin", "config", "local"]


@db_api.route("/database_list")
class DatabaseList(Resource):
    @db_api.doc(description="MongoDB의 모든 Database 리스트 출력")
    def get(self):
        from .app import mongo_client

        db_list = mongo_client.list_database_names()

        return jsonify(db_list)


@db_api.route("/collection_list")
class CollectionList(Resource):
    @db_api.doc(
        params={"db_name": "Name of the database"},
        responses={
            200: "Success",
            403: "Access denied to the database",
            404: "Database does not exist",
        },
        description="db_name 파라미터로 전달한 Database의 모든 Collection 리스트 출력",
    )
    def get(self, db_name):
        from .app import mongo_client

        if db_name in protected_dbs:
            return jsonify({"error": f"Access denied to {db_name} DB."}), 403

        if db_name in mongo_client.list_database_names():
            db = mongo_client[db_name]
            collection_list = db.list_collection_names()

            return jsonify(collection_list)
        else:
            return jsonify({"error": f"{db_name} does not exist."}), 404


cve_api = Namespace("api/cve", description="CVE 관련 API")


@cve_api.route("/count")
class CveCount(Resource):
    @cve_api.doc(responses={200: "Success"}, description="각 연도별 CVE 개수 출력")
    def get(self):
        from .app import mongo_client

        cve_collection = mongo_client["CVE-Scout"]["CVE_INFO"]
        pipeline = [
            {"$project": {"year": {"$substr": ["$cve.id", 4, 4]}}},
            {"$group": {"_id": "$year", "count": {"$sum": 1}}},
        ]
        year_counts = {
            doc["_id"]: doc["count"] for doc in cve_collection.aggregate(pipeline)
        }

        return year_counts


@cve_api.route("/all")
class CveAllList(Resource):
    @cve_api.doc(
        responses={200: "Success"}, description="MongoDB에 저장된 모든 CVE ID 리스트 출력"
    )
    def get(self):
        from .app import mongo_client

        cve_data = []
        for cve in mongo_client["CVE-Scout"]["CVE_INFO"].find(
            {}, {"_id": 0, "cve.id": 1}
        ):
            cve_data.append(cve["cve"]["id"])

        return jsonify({"cve": cve_data})


@cve_api.route("/all/count")
class CveAllCount(Resource):
    @cve_api.doc(responses={200: "Success"}, description="MongoDB에 저장된 모든 CVE의 개수 출력")
    def get(self):
        from .app import mongo_client

        cve_collection = mongo_client["CVE-Scout"]["CVE_INFO"]
        cve_count = cve_collection.count_documents({})

        return {"count": cve_count}


@cve_api.route("/<int:year>")
class CveYearList(Resource):
    @cve_api.doc(
        params={"year": "Year of the CVE"},
        responses={200: "Success"},
        description="MongoDB에 저장된 특정 연도의 CVE ID 리스트 출력",
    )
    def get(self, year):
        from .app import mongo_client

        cve_collection = mongo_client["CVE-Scout"]["CVE_INFO"]

        cve_data = []
        for cve in cve_collection.find(
            {"cve.id": {"$regex": f"CVE-{year}-"}}, {"_id": 0, "cve.id": 1}
        ):
            cve_data.append(cve["cve"]["id"])

        return jsonify({"cve": cve_data})


@cve_api.route("/<int:year>/count")
class CveYearCount(Resource):
    @cve_api.doc(
        params={"year": "Year of the CVE"},
        responses={200: "Success"},
        description="MongoDB에 저장된 특정 연도의 CVE 개수 출력",
    )
    def get(self, year):
        from .app import mongo_client

        cve_collection = mongo_client["CVE-Scout"]["CVE_INFO"]
        cve_count = cve_collection.count_documents(
            {"cve.id": {"$regex": f"CVE-{year}-"}}
        )

        return {"count": cve_count}


@cve_api.route("/<string:keyword>")
class CveByPlatform(Resource):
    @cve_api.doc(
        params={"keyword": "Search keyword", "page": "Page number"},
        responses={200: "Success"},
        description="특정 키워드를 가진 CVE ID 리스트 출력",
    )
    def get(self, keyword):
        page = int(request.args.get("page", 1))
        nvd = NVD_CVE_Parser(
            api_url="https://services.nvd.nist.gov/rest/json/cves/2.0/"
        )

        results_per_page = 2000

        result = nvd.fetch_cve_data_with_keyword(
            (page - 1) * results_per_page,
            results_per_page,
            keyword=keyword,
            exact_match=True,
        )

        if not result:
            result = "No more results"

        return jsonify({"cve": result})
