from flask import request, jsonify
from flask_restx import Namespace, Resource
import openai
import os

openai.api_key = os.getenv('CHATGPT_API')

def gpt(sqlite_client, mongo_handler):
    api = Namespace('gpt', description='ChatGPT 관련 라우트')
    
    @api.route('/test')
    class TEST(Resource):
        @api.doc(
            responses={200: "Success"},
            description="ChatGPT에 'log4shell' 취약점에 대해 물어보고 응답 받기"
        )
        def get(self):
            text = "CVE-2021-44228에 대해서 설명해줘"

            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo-0613",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": text},
                ]
            )

            return {"response": response['choices'][0]['message']['content'].strip()}, 200

    @api.route('/cve/<cve_id>')
    class CVE(Resource):
        def get_cve_mitigation_plan(self, cve_info):
            plan_content = f"""
                [CVE 정보] 
                {cve_info[0]}
                
                [취약점 설명]
                {cve_info[1]} 
                
                [CVSS정보]
                {cve_info[2]}

                위 취약점에 대한 조치방안을 다음과 같은 형식으로 요약해줘.
                이때 버전 업그레이드의 조치방안은 빼줘 그리고 조치방안은 5개 이하로 알려줘

                [조치 방안]
                1. ~~~~
                2. ~~~~
                3. ~~~~
                4. ~~~~
                5. ~~~~
            """

            plan_response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are an information security expert who speaks Korean."},
                    {"role": "user", "content": plan_content},
                ]
            )
            
            return plan_response['choices'][0]['message']['content'].strip()
        
        def translate_vulnerability_description(self, cve_description):
            translation_request_content = f"""
                {cve_description}

                취약점 설명에 대해서 한국어로 번역해줘.
                이때 전문용어는 번역하지 말고 그대로 사용해줘.
            """
            
            translation_response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are an information security expert who speaks Korean."},
                    {"role": "user", "content": translation_request_content},
                ]
            )
            
            return translation_response['choices'][0]['message']['content'].strip()

        def get_namespace_pattern(self, cve_id):
            if cve_id.startswith("GHSA"):
                return "github:%"
            elif cve_id.startswith("CVE"):
                return "nvd:%"
            else:
                return None
        
        @api.doc(
            responses={200: "Success"},
            description="ChatGPT에 CVE 정보를 바탕으로 조치 방안 요청"
        )
        def get(self, cve_id): 
            namespace_pattern = self.get_namespace_pattern(cve_id)
            if namespace_pattern is None:
                return {"error": "지원하지 않는 취약점 ID 형식입니다."}, 400
            
            cursor = sqlite_client.cursor()
            cursor.execute("""
                    SELECT id, description, cvss, severity
                    FROM vulnerability_metadata
                    WHERE id = ? AND namespace LIKE ?
                """, 
                (cve_id, namespace_pattern)
            )
            cve_info = cursor.fetchone()
            cursor.close()

            if not cve_info:
                return {"error": "CVE 정보를 찾을 수 없습니다."}, 404

            mitigation_plan = self.get_cve_mitigation_plan(cve_info)
            translated_description = self.translate_vulnerability_description(cve_info[1])
            
            return {
                "response": {
                    "id": cve_info[0],
                    "description": translated_description,
                    "severity": cve_info[2],
                    "CVSS_info": cve_info[2],
                    "mitigation_plan": mitigation_plan
                }
            }, 200
        
    return api