from flask_restx import Namespace, Resource, reqparse
from werkzeug.datastructures import FileStorage
from werkzeug.utils import secure_filename
import os
import uuid
import subprocess
import shutil

upload_directory = "upload"

def sbom(mongo_client):
    api = Namespace("sbom", description="SBOM 관련 API")
    
    file_upload = reqparse.RequestParser()
    file_upload.add_argument('file', location='files', type=FileStorage, required=True, help='The file to be uploaded')

    @api.route('/sbom/upload', methods=['POST'])
    class SbomUploadFile(Resource):
        @staticmethod
        def ensure_upload_directory_exists():
            """Ensure the upload directory exists."""
            os.makedirs(upload_directory, exist_ok=True)

        @staticmethod
        def save_uploaded_file(uploaded_file):
            """Save the uploaded file in a random directory and return its path."""
            random_dir_name = str(uuid.uuid4())
            directory_path = os.path.join(upload_directory, random_dir_name)
            os.makedirs(directory_path, exist_ok=True)

            file_path = os.path.join(directory_path, uploaded_file.filename)
            uploaded_file.save(file_path)
            return random_dir_name

        @api.expect(file_upload, validate=True)
        def post(self):
            self.ensure_upload_directory_exists()
            
            args = file_upload.parse_args()
            uploaded_file = args['file']
            
            if not uploaded_file:
                return {"error": "No file part"}, 400

            random_dir_name = self.save_uploaded_file(uploaded_file)
            
            return {"result": f"File saved to {random_dir_name}"}
    
    filename_parser = reqparse.RequestParser()
    filename_parser.add_argument('filename', type=str, required=True, help='Name of the SBOM file to be scanned')
    
    @api.route('/sbom/scan', methods=['GET'])
    class SbomScan(Resource):
        @staticmethod
        def run_syft_grype(target_directory):
            script_path = "Scripts/sbom_run.sh"

            result = subprocess.run([script_path, target_directory], capture_output=True, text=True)

            return result.returncode
        
        @staticmethod
        def run_result(run_result):
            if run_result == 0:
                return {"result":"success"}
            elif run_result == 1:
                return {"result":"false", "error":"No filename provided"}
            elif run_result == 2:
                return {"result":"false", "error":"Not config file"}
            elif run_result == 3:
                return {"result":"false", "error":"Not SBOM file"}
                
        @api.doc(
            params={"filename": {"description": "SBOM File", "in": "query", "type": "string"}},
            responses={200: "Success"},
            description="업로드한 파일을 Syft랑 Grype에 돌리는 기능",
        )
        def get(self):      
            args = filename_parser.parse_args()
            random_dir_name = args["filename"]

            # Check if the directory exists in the upload directory
            directory_path = os.path.join(upload_directory, random_dir_name)
            print(directory_path)
            if not os.path.exists(directory_path) or not os.path.isdir(directory_path):
                return {"error": f"Directory {random_dir_name} not found"}, 404

            result = SbomScan.run_result(
                SbomScan.run_syft_grype(directory_path)
            )
            
            return result, 200

    return api
