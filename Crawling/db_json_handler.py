from pymongo import MongoClient
import json, os
from typing import List, Dict

# Constants
MONGO_URL = 'mongodb://localhost:27017'
DB_NAME = 'CVE-Scout'
JSON_EXT = '.json'

class Save_DB:
    def __init__(self, json_path:str):
        self.client = MongoClient(MONGO_URL)
        self.db = self.client[DB_NAME]
        self.json_path = json_path

    def _parse_year_directory(self) -> List[str]:
        year_directory_list = []
        for year_directory in os.listdir(self.json_path):
            year_directory_path = os.path.join(self.json_path, year_directory)

            if not os.path.isdir(year_directory_path):
                continue
            
            year_directory_list.append(year_directory_path)
            year_directory_list.sort()

        return year_directory_list

    def _parse_json_files(self, year_directory_path:str) -> List[str]:
            year_json_file_list = []

            for filename in os.listdir(year_directory_path):
                if filename.endswith(JSON_EXT):
                    file_path = os.path.join(year_directory_path, filename)
                    
                    year_json_file_list.append(file_path)
                    year_json_file_list.sort()
            
            return year_json_file_list

    def _read_json_file(self, file_path:str) -> Dict:
        with open(file_path, 'r') as file:
            data = json.load(file)

        return data

    def _insert_data(self, collection, data: Dict) -> None:
        collection.insert_one(data)

    def save(self, collection_name:str) -> None:
        collection = self.db[collection_name]

        for year_directory in self._parse_year_directory():
            json_list = self._parse_json_files(year_directory)
            
            for file_path in json_list:
                data = self._read_json_file(file_path)
                self._insert_data(collection, data)

    def update(self, collection_name:str, update_cve_ids:List[str]) -> None:
        collection = self.db[collection_name]

        for cve_id in update_cve_ids:
            year_directory_path = os.path.join(self.json_path, cve_id.split("-")[1])
            file_path = os.path.join(year_directory_path, cve_id + JSON_EXT)
        
            data = self._read_json_file(file_path)

            filter_query = {"cve.id": cve_id}
            collection.replace_one(filter_query, data)
            

if __name__ == "__main__":
    # JSON files are assumed to be in the "./jsons" directory
    db_handler = Save_DB("./jsons")

    # Testing the save method
    db_handler.save("test_collection")

    # Testing the update method with a list of CVE IDs
    # Assuming that "CVE-2017-0143.json", "CVE-2017-0144.json", "CVE-2017-0145.json" are present in the "json_files" directory
    update_cve_ids = ["CVE-2017-0143", "CVE-2017-0144", "CVE-2017-0145"]
    db_handler.update("test_collection", update_cve_ids)