from pymongo import MongoClient
import json, os

class Save_DB:
    def __init__(self, json_path:str):
        self.client = MongoClient('mongodb://localhost:27017')
        self.db = self.client['CVE-Scout']
        self.json_path = json_path

    def __year_directory_parsing(self) -> list:
        year_directory_list = []
        for year_directory in os.listdir(self.json_path):
            year_directory_path = os.path.join(self.json_path, year_directory)

            # 디렉터리가 아닌 파일은 건너뜁니다.
            if not os.path.isdir(year_directory_path):
                continue
            
            year_directory_list.append(year_directory_path)
            year_directory_list.sort()

        return year_directory_list

    def __json_file_parsing(self, year_directory_path:str):
        year_json_file_list = []

        for filename in os.listdir(year_directory_path):
            if filename.endswith('.json'):
                file_path = os.path.join(year_directory_path, filename)
                
                year_json_file_list.append(file_path)
                year_json_file_list.sort()
        
        return year_json_file_list

    def __read_json(self, file_path:str) -> dict:
        with open(file_path, 'r') as file:
            data = json.load(file)

        return data

    def save(self, collection_name:str):
        collection = self.db[collection_name]

        for year_directory in self.__year_directory_parsing():
            json_lsit = self.__json_file_parsing(year_directory)
            
            for file_path in json_lsit:
                data = self.__read_json(file_path)
                collection.insert_one(data)

    def update(self, collection_name:str, update_cve_ids:list):
        collection = self.db[collection_name]

        for cve_id in update_cve_ids:
            year_directory_path = os.path.join(self.json_path, cve_id.split("-")[1])
            file_path = os.path.join(year_directory_path, cve_id+".json")
        
            data = self.__read_json(file_path)

            filter_query = {"cve.id": cve_id}
            collection.replace_one(filter_query, data)

if __name__ == "__main__":
    # for year_directory in os.listdir(directory):
    #     year_directory_path = os.path.join(directory, year_directory)

    #     # 디렉터리가 아닌 파일은 건너뜁니다.
    #     if not os.path.isdir(year_directory_path):
    #         continue

    #     # 연도별 디렉터리 내의 모든 JSON 파일을 순회
    #     for filename in os.listdir(year_directory_path):
    #         if filename.endswith('.json'):
    #             file_path = os.path.join(year_directory_path, filename)

    #             # JSON 파일 읽기
    #             with open(file_path, 'r') as file:
    #                 data = json.load(file)

    #             # 데이터 삽입
    #             collection.insert_one(data)

    SD = Save_DB(json_path="./jsons")
    # SD.save("CVE_INFO")

    test = ['CVE-2023-33355', 'CVE-2023-33356', 'CVE-2023-0950', 'CVE-2023-2255', 'CVE-2023-33439', 'CVE-2023-33440', 'CVE-2021-46881', 'CVE-2021-46882', 'CVE-2021-46883', 'CVE-2021-46884', 'CVE-2021-46885', 'CVE-2021-46886', 'CVE-2021-46887', 'CVE-2022-48478', 'CVE-2022-48479', 'CVE-2022-48480', 'CVE-2023-0116', 'CVE-2023-0117', 'CVE-2023-22970', 'CVE-2023-2825', 'CVE-2023-2854', 'CVE-2023-2855', 'CVE-2023-2857', 'CVE-2023-2858', 'CVE-2023-2879', 'CVE-2023-2948', 'CVE-2023-2949', 'CVE-2023-2950', 'CVE-2023-2951', 'CVE-2014-125101', 'CVE-2015-10106', 'CVE-2023-33216', 'CVE-2023-32958', 'CVE-2023-33212', 'CVE-2023-33309', 'CVE-2023-33314', 'CVE-2023-33315', 'CVE-2023-33326', 'CVE-2023-33328', 'CVE-2023-33931', 'CVE-2023-28785', 'CVE-2023-32800', 'CVE-2023-33211', 'CVE-2023-33311', 'CVE-2023-33313', 'CVE-2023-33316', 'CVE-2023-33319', 'CVE-2023-33332', 'CVE-2022-36345', 'CVE-2023-33926', 'CVE-2021-4336', 'CVE-2023-33291', 'CVE-2023-31873', 'CVE-2023-32762', 'CVE-2023-32763', 'CVE-2023-29380', 'CVE-2023-30350', 'CVE-2023-30570', 'CVE-2023-31874', 'CVE-2022-33974', 'CVE-2022-45372', 'CVE-2023-28153', 'CVE-2023-29078', 'CVE-2023-29079', 'CVE-2023-24597', 'CVE-2023-24598', 'CVE-2023-24599', 'CVE-2023-24600', 'CVE-2023-24601', 'CVE-2023-24602', 'CVE-2023-24603', 'CVE-2023-24604', 'CVE-2023-24605', 'CVE-2023-2954', 'CVE-2023-2955', 'CVE-2023-2808', 'CVE-2023-2962']
    SD.update("CVE_INFO", test)