import requests, json, time, os, pytz
from pymongo import MongoClient
from datetime import datetime, timedelta

class NVD_CVE_Parser:
    def __init__(self, api_url):
        self.api_url = api_url
        self.seoul_tz = pytz.timezone('Asia/Seoul')

    def fetch_cve_data(self, start_index: int, results_per_page: int):
        url = f"{self.api_url}/?resultsPerPage={results_per_page}&startIndex={start_index}"
        response = requests.get(url)

        if response.status_code == 200:
            cve_data = json.loads(response.text)["vulnerabilities"]
            self.save_cve_data(cve_data)

            if len(cve_data) < results_per_page:
                print("모든 정보를 불려왔습니다.")
                return True

        elif response.status_code == 403:
                print("API 요청이 너무 빠릅니다. 잠시 후 다시 시도합니다.")
                time.sleep(6)

        else:
            print(f"API 요청에 실패했습니다. 상태 코드: {response.status_code}")
            return False
            

    def save_cve_data(self, cve_data: list):
        for cve_item in cve_data:
            cve_id = cve_item["cve"]["id"]
            print(f'{cve_id} 정보 저장.....')

            year = self.__year_division(cve_id)
            self.__create_directory(year)

            self.save_json(cve_item)

    def __year_division(self, cve_id: str):
        return cve_id.split('-')[1]

    def __create_directory(self, year: str):
        if not os.path.exists(f'./jsons/{year}'):
            os.makedirs(f"./jsons/{year}")

    def save_json(self, cve_item: dict):
        cve_id = cve_item["cve"]["id"]
        year = self.__year_division(cve_id)

        file_path = f'./jsons/{year}'

        with open(f'{file_path}/{cve_id}.json', 'w') as out_file:
            json.dump(cve_item, out_file, indent=4)

    def fetch_modified_cve_data(self, days: int = 0):
        now = datetime.now(self.seoul_tz) - timedelta(days)

        start_of_yesterday = now.replace(hour=0, minute=0, second=0, microsecond=0)
        end_of_yesterday = start_of_yesterday + timedelta(days=1)

        start_date = start_of_yesterday.isoformat().replace('+', '%2B')
        end_date = end_of_yesterday.isoformat().replace('+', '%2B')

        url = f"{self.api_url}?lastModStartDate={start_date}&lastModEndDate={end_date}"

        response = requests.get(url)
        cve_data = json.loads(response.text)["vulnerabilities"]

        self.save_cve_data(cve_data)

        if days == 0:
            print(f"오늘 수정된 수정된 CVE 데이터를 불러왔습니다.")
        else:
            print(f"{days}일 전에 수정된 수정된 CVE 데이터를 불러왔습니다.")

    

if __name__ == "__main__":
    NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0/"

    nvd = NVD_CVE_Parser(NVD_API_URL)

    # 모든 데이터 파싱하는 코드
    # start_index = 0
    # results_per_page = 2000

    # while True:
    #     if isinstance(nvd.fetch_cve_data(start_index, results_per_page), bool):
    #         break
            
    #     start_index += results_per_page

    # 어제 변경된 데이터 파싱하는 코드
    nvd.fetch_modified_cve_data(days=1)

    # 오늘 변경된 데이터 파싱하는 코드
    nvd.fetch_modified_cve_data()