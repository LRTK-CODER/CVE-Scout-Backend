import requests, json, time
from pymongo import MongoClient

class NVD_CVE_Parser:
    def __init__(self, api_url, mongo_connection):
        self.api_url = api_url
        self.client = MongoClient(mongo_connection)
        self.db = self.client["cve_database"]
        self.cve_collection = self.db["cves"]

    def fetch_cve_data(self, start_index):
        start_index = 0
        results_per_page = 2000

        while True:
            url = f"https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage={results_per_page}&startIndex={start_index}"
            response = requests.get(url)

            if response.status_code == 200:
                cve_data = json.loads(response.text)["vulnerabilities"]
                self.store_cve_data(cve_data)

                if len(cve_data) < results_per_page:
                    break

                start_index += results_per_page
            elif response.status_code == 403:
                print("API 요청이 너무 빠릅니다. 잠시 후 다시 시도합니다.")
                time.sleep(6)
            else:
                print(f"API 요청에 실패했습니다. 상태 코드: {response.status_code}")
                break

    def store_cve_data(self, cve_data):
        for cve_item in cve_data:
            cve_id = cve_item["cve"]["id"]
            last_modified = cve_item["cve"]["lastModified"]

            # 중복되는 CVE ID가 있는지 확인
            existing_cve = self.cve_collection.find_one({"cve.id": cve_id})

            # 중복되는 값이 없으면 데이터를 저장
            if not existing_cve:
                self.cve_collection.insert_one(cve_item)
                print(f"{cve_id}가 새로 저장되었습니다.")
            else:
                # lastModified 값이 다른지 확인
                if existing_cve["cve"]["lastModified"] != last_modified:
                    # lastModified 값이 다르면 기존 문서를 업데이트
                    self.cve_collection.update_one({"cve.id": cve_id}, {"$set": cve_item})
                    print(f"{cve_id}가 업데이트되었습니다.")
                else:
                    print(f"{cve_id}는 이미 저장되어 있습니다.")

    def parse_and_store_cve_data(self):
        start_index = 0
        has_more_data = True

        while has_more_data:
            cve_data = self.fetch_cve_data(start_index)

            if cve_data:
                self.store_cve_data(cve_data)
                print(f"{start_index}부터 시작하는 CVE 데이터가 MongoDB에 저장되었습니다.")
                start_index += 2000
            else:
                has_more_data = False

if __name__ == "__main__":
    NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0/"
    MONGO_CONNECTION = "mongodb://localhost:27017/"

    nvd_cve_parser = NVD_CVE_Parser(NVD_API_URL, MONGO_CONNECTION)
    nvd_cve_parser.parse_and_store_cve_data()