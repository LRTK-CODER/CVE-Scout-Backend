from flask import request, jsonify
from flask_restx import Namespace, Resource


def cve(mongo_client):
    api = Namespace("cve", description="CVE 관련 API")

    @api.route("/all")
    class CveAllList(Resource):
        @api.doc(
            responses={200: "Success"}, description="MongoDB에 저장된 모든 CVE ID 리스트 출력"
        )
        def get(self):
            cve_data = []
            for cve in mongo_client["CVE-Scout"]["CVE_INFO"].find(
                {}, {"_id": 0, "cve.id": 1}
            ):
                cve_data.append(cve["cve"]["id"])

            return jsonify({"cve": cve_data})

    @api.route("/<int:year>")
    class CveYearList(Resource):
        @api.doc(
            params={"year": "Year of the CVE"},
            responses={200: "Success"},
            description="MongoDB에 저장된 특정 연도의 CVE ID 리스트 출력",
        )
        def get(self, year):
            cve_collection = mongo_client["CVE-Scout"]["CVE_INFO"]

            cve_data = []
            for cve in cve_collection.find(
                {"cve.id": {"$regex": f"CVE-{year}-"}}, {"_id": 0, "cve.id": 1}
            ):
                cve_data.append(cve["cve"]["id"])

            return jsonify({"cve": cve_data})

    @api.route("/detail/<string:cve_id>")
    class CveDetail(Resource):
        @api.doc(
            params={"cve_id": "CVE ID"},
            responses={200: "Success", 404: "CVE not found"},
            description="MongoDB에 저장된 특정 CVE의 정보 출력",
        )
        def get(self, cve_id):
            cve_collection = mongo_client["CVE-Scout"]["CVE_INFO"]

            cve_info = cve_collection.find_one({"cve.id": cve_id}, {"_id": 0})
            if cve_info:
                return jsonify(cve_info)
            else:
                return jsonify({"error": "CVE not found"}), 404

    return api